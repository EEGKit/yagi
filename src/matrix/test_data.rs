// All test contents for matrix module

// Test data for matrix addition

// matrixf_data_add_x [size: 5 x 4]
pub const MATRIXF_DATA_ADD_X: [f32; 20] = [
    -2.153858900070, /* ( 0, 0) */
     0.374406367540, /* ( 0, 1) */
    -0.356648415327, /* ( 0, 2) */
     0.673922061920, /* ( 0, 3) */
    -1.686753273010, /* ( 1, 0) */
    -0.382442235947, /* ( 1, 1) */
     0.287308961153, /* ( 1, 2) */
    -0.479356884956, /* ( 1, 3) */
    -0.336519986391, /* ( 2, 0) */
     0.173820436001, /* ( 2, 1) */
    -1.243059277534, /* ( 2, 2) */
    -1.508571028709, /* ( 2, 3) */
     0.903724849224, /* ( 3, 0) */
     0.490690946579, /* ( 3, 1) */
     0.242906242609, /* ( 3, 2) */
     0.192125678062, /* ( 3, 3) */
     0.053418140858, /* ( 4, 0) */
     0.389735013247, /* ( 4, 1) */
     0.781731247902, /* ( 4, 2) */
    -1.207890510559, /* ( 4, 3) */
];

// matrixf_data_add_y [size: 5 x 4]
pub const MATRIXF_DATA_ADD_Y: [f32; 20] = [
    -1.569433808327, /* ( 0, 0) */
     0.182892739773, /* ( 0, 1) */
     2.420134067535, /* ( 0, 2) */
    -0.114732131362, /* ( 0, 3) */
    -1.274159908295, /* ( 1, 0) */
    -1.230959534645, /* ( 1, 1) */
     0.574799835682, /* ( 1, 2) */
    -0.756966531277, /* ( 1, 3) */
     1.426752924919, /* ( 2, 0) */
     1.018160581589, /* ( 2, 1) */
    -0.099268406630, /* ( 2, 2) */
     0.683501064777, /* ( 2, 3) */
     0.145665585995, /* ( 3, 0) */
     0.337123543024, /* ( 3, 1) */
     0.754367768764, /* ( 3, 2) */
     0.908503055573, /* ( 3, 3) */
    -1.320610523224, /* ( 4, 0) */
    -1.090982913971, /* ( 4, 1) */
     0.494600951672, /* ( 4, 2) */
     0.713486075401, /* ( 4, 3) */
];

// matrixf_data_add_z [size: 5 x 4]
pub const MATRIXF_DATA_ADD_Z: [f32; 20] = [
    -3.723292708397, /* ( 0, 0) */
     0.557299107313, /* ( 0, 1) */
     2.063485652208, /* ( 0, 2) */
     0.559189930558, /* ( 0, 3) */
    -2.960913181305, /* ( 1, 0) */
    -1.613401770592, /* ( 1, 1) */
     0.862108796835, /* ( 1, 2) */
    -1.236323416233, /* ( 1, 3) */
     1.090232938528, /* ( 2, 0) */
     1.191981017590, /* ( 2, 1) */
    -1.342327684164, /* ( 2, 2) */
    -0.825069963932, /* ( 2, 3) */
     1.049390435219, /* ( 3, 0) */
     0.827814489603, /* ( 3, 1) */
     0.997274011374, /* ( 3, 2) */
     1.100628733635, /* ( 3, 3) */
    -1.267192382365, /* ( 4, 0) */
    -0.701247900724, /* ( 4, 1) */
     1.276332199574, /* ( 4, 2) */
    -0.494404435158, /* ( 4, 3) */
];

// Test data for matrix augmentation

// matrixf_data_aug_x [size: 5 x 4]
pub const MATRIXF_DATA_AUG_X: [f32; 20] = [
   -0.747572302818, /* ( 0, 0) */
    1.023007512093, /* ( 0, 1) */
   -0.806419134140, /* ( 0, 2) */
    1.476346969604, /* ( 0, 3) */
   -0.456311076880, /* ( 1, 0) */
    1.049571633339, /* ( 1, 1) */
    0.041211493313, /* ( 1, 2) */
    0.870350718498, /* ( 1, 3) */
   -0.585918903351, /* ( 2, 0) */
   -2.498867988586, /* ( 2, 1) */
    1.247432827950, /* ( 2, 2) */
   -1.840264678001, /* ( 2, 3) */
    0.618996977806, /* ( 3, 0) */
   -1.083691835403, /* ( 3, 1) */
   -1.827050209045, /* ( 3, 2) */
   -0.579039454460, /* ( 3, 3) */
    1.507880568504, /* ( 4, 0) */
    1.633087396622, /* ( 4, 1) */
   -0.439950227737, /* ( 4, 2) */
   -0.058893665671, /* ( 4, 3) */
];

// matrixf_data_aug_y [size: 5 x 3]
pub const MATRIXF_DATA_AUG_Y: [f32; 15] = [
    0.376702636480, /* ( 0, 0) */
    0.790158689022, /* ( 0, 1) */
    2.111151933670, /* ( 0, 2) */
   -0.690664231777, /* ( 1, 0) */
   -0.598035037518, /* ( 1, 1) */
   -0.137144193053, /* ( 1, 2) */
    1.078616261482, /* ( 2, 0) */
    0.907722294331, /* ( 2, 1) */
   -0.432205766439, /* ( 2, 2) */
   -1.615019798279, /* ( 3, 0) */
    0.122782632709, /* ( 3, 1) */
    1.174023866653, /* ( 3, 2) */
    0.233828529716, /* ( 4, 0) */
    0.032883912325, /* ( 4, 1) */
   -0.896481394768, /* ( 4, 2) */
];

// matrixf_data_aug_z [size: 5 x 7]
pub const MATRIXF_DATA_AUG_Z: [f32; 35] = [
   -0.747572302818, /* ( 0, 0) */
    1.023007512093, /* ( 0, 1) */
   -0.806419134140, /* ( 0, 2) */
    1.476346969604, /* ( 0, 3) */
    0.376702636480, /* ( 0, 4) */
    0.790158689022, /* ( 0, 5) */
    2.111151933670, /* ( 0, 6) */
   -0.456311076880, /* ( 1, 0) */
    1.049571633339, /* ( 1, 1) */
    0.041211493313, /* ( 1, 2) */
    0.870350718498, /* ( 1, 3) */
   -0.690664231777, /* ( 1, 4) */
   -0.598035037518, /* ( 1, 5) */
   -0.137144193053, /* ( 1, 6) */
   -0.585918903351, /* ( 2, 0) */
   -2.498867988586, /* ( 2, 1) */
    1.247432827950, /* ( 2, 2) */
   -1.840264678001, /* ( 2, 3) */
    1.078616261482, /* ( 2, 4) */
    0.907722294331, /* ( 2, 5) */
   -0.432205766439, /* ( 2, 6) */
    0.618996977806, /* ( 3, 0) */
   -1.083691835403, /* ( 3, 1) */
   -1.827050209045, /* ( 3, 2) */
   -0.579039454460, /* ( 3, 3) */
   -1.615019798279, /* ( 3, 4) */
    0.122782632709, /* ( 3, 5) */
    1.174023866653, /* ( 3, 6) */
    1.507880568504, /* ( 4, 0) */
    1.633087396622, /* ( 4, 1) */
   -0.439950227737, /* ( 4, 2) */
   -0.058893665671, /* ( 4, 3) */
    0.233828529716, /* ( 4, 4) */
    0.032883912325, /* ( 4, 5) */
   -0.896481394768, /* ( 4, 6) */
];

// Test data for conjugate gradient solver

// matrixf_data_cgsolve_A [size: 8 x 8]
pub const MATRIXF_DATA_CGSOLVE_A: [f32; 64] = [
   12.722920400000, /* ( 0, 0) */
    0.000000000000, /* ( 0, 1) */
   -7.952912300000, /* ( 0, 2) */
    0.000000000000, /* ( 0, 3) */
    4.111499800000, /* ( 0, 4) */
    0.000000000000, /* ( 0, 5) */
    0.000000000000, /* ( 0, 6) */
    0.000000000000, /* ( 0, 7) */
    0.000000000000, /* ( 1, 0) */
    0.065151200000, /* ( 1, 1) */
    0.000000000000, /* ( 1, 2) */
   -0.218259800000, /* ( 1, 3) */
    0.000000000000, /* ( 1, 4) */
    0.000000000000, /* ( 1, 5) */
    0.000000000000, /* ( 1, 6) */
    0.000000000000, /* ( 1, 7) */
   -7.952912300000, /* ( 2, 0) */
    0.000000000000, /* ( 2, 1) */
    5.031585200000, /* ( 2, 2) */
    0.000000000000, /* ( 2, 3) */
   -2.570038800000, /* ( 2, 4) */
   -0.110545700000, /* ( 2, 5) */
    0.000000000000, /* ( 2, 6) */
    0.000000000000, /* ( 2, 7) */
    0.000000000000, /* ( 3, 0) */
   -0.218259800000, /* ( 3, 1) */
    0.000000000000, /* ( 3, 2) */
    0.733045600000, /* ( 3, 3) */
    0.000000000000, /* ( 3, 4) */
    0.000000000000, /* ( 3, 5) */
    0.000000000000, /* ( 3, 6) */
    0.000000000000, /* ( 3, 7) */
    4.111499800000, /* ( 4, 0) */
    0.000000000000, /* ( 4, 1) */
   -2.570038800000, /* ( 4, 2) */
    0.000000000000, /* ( 4, 3) */
    1.338132900000, /* ( 4, 4) */
    0.239381000000, /* ( 4, 5) */
    0.078430200000, /* ( 4, 6) */
    0.000000000000, /* ( 4, 7) */
    0.000000000000, /* ( 5, 0) */
    0.000000000000, /* ( 5, 1) */
   -0.110545700000, /* ( 5, 2) */
    0.000000000000, /* ( 5, 3) */
    0.239381000000, /* ( 5, 4) */
    7.472388300000, /* ( 5, 5) */
    1.981894700000, /* ( 5, 6) */
   -1.373365000000, /* ( 5, 7) */
    0.000000000000, /* ( 6, 0) */
    0.000000000000, /* ( 6, 1) */
    0.000000000000, /* ( 6, 2) */
    0.000000000000, /* ( 6, 3) */
    0.078430200000, /* ( 6, 4) */
    1.981894700000, /* ( 6, 5) */
    3.489272600000, /* ( 6, 6) */
    0.000000000000, /* ( 6, 7) */
    0.000000000000, /* ( 7, 0) */
    0.000000000000, /* ( 7, 1) */
    0.000000000000, /* ( 7, 2) */
    0.000000000000, /* ( 7, 3) */
    0.000000000000, /* ( 7, 4) */
   -1.373365000000, /* ( 7, 5) */
    0.000000000000, /* ( 7, 6) */
    2.063114900000, /* ( 7, 7) */
];

// matrixf_data_cgsolve_x [size: 8 x 1]
pub const MATRIXF_DATA_CGSOLVE_X: [f32; 8] = [
    0.162052200000, /* ( 0, 0) */
   -0.012720300000, /* ( 1, 0) */
    1.043375100000, /* ( 2, 0) */
    0.006205200000, /* ( 3, 0) */
    0.878157000000, /* ( 4, 0) */
    0.146412900000, /* ( 5, 0) */
    0.782585200000, /* ( 6, 0) */
   -0.825784600000, /* ( 7, 0) */
];

// matrixf_data_cgsolve_b [size: 8 x 1]
pub const MATRIXF_DATA_CGSOLVE_B: [f32; 8] = [
   -2.625551095190, /* ( 0, 0) */
   -0.002183088520, /* ( 1, 0) */
    1.687960897575, /* ( 2, 0) */
    0.007325024691, /* ( 3, 0) */
   -0.743719348831, /* ( 4, 0) */
    3.874032638311, /* ( 5, 0) */
    3.089702075189, /* ( 6, 0) */
   -1.904766864859, /* ( 7, 0) */
];

// Test data for Cholesky decomposition

// matrixf_data_chol_L [size: 4 x 4]
pub const MATRIXF_DATA_CHOL_L: [f32; 16] = [
    1.010000000000, /* ( 0, 0) */
    0.000000000000, /* ( 0, 1) */
    0.000000000000, /* ( 0, 2) */
    0.000000000000, /* ( 0, 3) */
   -1.420000000000, /* ( 1, 0) */
    0.500000000000, /* ( 1, 1) */
    0.000000000000, /* ( 1, 2) */
    0.000000000000, /* ( 1, 3) */
    0.320000000000, /* ( 2, 0) */
    2.010000000000, /* ( 2, 1) */
    0.300000000000, /* ( 2, 2) */
    0.000000000000, /* ( 2, 3) */
   -1.020000000000, /* ( 3, 0) */
   -0.320000000000, /* ( 3, 1) */
   -1.650000000000, /* ( 3, 2) */
    1.070000000000, /* ( 3, 3) */
];

// matrixf_data_chol_A [size: 4 x 4]
pub const MATRIXF_DATA_CHOL_A: [f32; 16] = [
    1.020100000000, /* ( 0, 0) */
   -1.434200000000, /* ( 0, 1) */
    0.323200000000, /* ( 0, 2) */
   -1.030200000000, /* ( 0, 3) */
   -1.434200000000, /* ( 1, 0) */
    2.266400000000, /* ( 1, 1) */
    0.550600000000, /* ( 1, 2) */
    1.288400000000, /* ( 1, 3) */
    0.323200000000, /* ( 2, 0) */
    0.550600000000, /* ( 2, 1) */
    4.232500000000, /* ( 2, 2) */
   -1.464600000000, /* ( 2, 3) */
   -1.030200000000, /* ( 3, 0) */
    1.288400000000, /* ( 3, 1) */
   -1.464600000000, /* ( 3, 2) */
    5.010200000000, /* ( 3, 3) */
];

// Test data for Gram-Schmidt orthonormalization

// matrixf_data_gramschmidt_A [size: 4 x 3]
pub const MATRIXF_DATA_GRAMSCHMIDT_A: [f32; 12] = [
    1.000000000000, /* ( 0, 0) */
    2.000000000000, /* ( 0, 1) */
    1.000000000000, /* ( 0, 2) */
    0.000000000000, /* ( 1, 0) */
    2.000000000000, /* ( 1, 1) */
    0.000000000000, /* ( 1, 2) */
    2.000000000000, /* ( 2, 0) */
    3.000000000000, /* ( 2, 1) */
    1.000000000000, /* ( 2, 2) */
    1.000000000000, /* ( 3, 0) */
    1.000000000000, /* ( 3, 1) */
    0.000000000000, /* ( 3, 2) */
];

// matrixf_data_gramschmidt_V [size: 4 x 3]
pub const MATRIXF_DATA_GRAMSCHMIDT_V: [f32; 12] = [
    0.408248290464, /* ( 0, 0) */
    0.235702260396, /* ( 0, 1) */
    0.666666666667, /* ( 0, 2) */
    0.000000000000, /* ( 1, 0) */
    0.942809041582, /* ( 1, 1) */
   -0.333333333333, /* ( 1, 2) */
    0.816496580928, /* ( 2, 0) */
    0.000000000000, /* ( 2, 1) */
    0.000000000000, /* ( 2, 2) */
    0.408248290464, /* ( 3, 0) */
   -0.235702260396, /* ( 3, 1) */
   -0.666666666667, /* ( 3, 2) */
];

// Test data for matrix inversion

// matrixf_data_inv_x [size: 5 x 5]
pub const MATRIXF_DATA_INV_X: [f32; 25] = [
    0.145655393600, /* ( 0, 0) */
   -2.292126655579, /* ( 0, 1) */
    0.928358852863, /* ( 0, 2) */
    0.995244622231, /* ( 0, 3) */
   -0.719965457916, /* ( 0, 4) */
    1.625229239464, /* ( 1, 0) */
    1.179069876671, /* ( 1, 1) */
    0.023814691231, /* ( 1, 2) */
   -0.458529949188, /* ( 1, 3) */
    0.870123147964, /* ( 1, 4) */
    1.599076509476, /* ( 2, 0) */
    1.012132167816, /* ( 2, 1) */
    0.240342438221, /* ( 2, 2) */
   -0.663878023624, /* ( 2, 3) */
    1.523158550262, /* ( 2, 4) */
    1.400263786316, /* ( 3, 0) */
   -0.016515849158, /* ( 3, 1) */
    0.525676131248, /* ( 3, 2) */
   -0.526886940002, /* ( 3, 3) */
   -0.605886101723, /* ( 3, 4) */
   -0.291201651096, /* ( 4, 0) */
    0.635409533978, /* ( 4, 1) */
    0.016531571746, /* ( 4, 2) */
    0.113017730415, /* ( 4, 3) */
   -0.886025428772, /* ( 4, 4) */
];

// matrixf_data_inv_y [size: 5 x 5]
pub const MATRIXF_DATA_INV_Y: [f32; 25] = [
    0.123047731616, /* ( 0, 0) */
    1.264793339850, /* ( 0, 1) */
   -0.888020214878, /* ( 0, 2) */
    0.146648698334, /* ( 0, 3) */
   -0.484762774689, /* ( 0, 4) */
    0.031615676756, /* ( 1, 0) */
   -0.041217620573, /* ( 1, 1) */
    0.486809371567, /* ( 1, 2) */
   -0.307386761818, /* ( 1, 3) */
    0.980900315396, /* ( 1, 4) */
    0.456515830075, /* ( 2, 0) */
   -2.168499777786, /* ( 2, 1) */
    2.469455722213, /* ( 2, 2) */
    0.010642598564, /* ( 2, 3) */
    1.737407148356, /* ( 2, 4) */
    0.690799395919, /* ( 3, 0) */
    1.532809684521, /* ( 3, 1) */
   -0.611813824735, /* ( 3, 2) */
   -1.028413056396, /* ( 3, 3) */
    0.595460566672, /* ( 3, 4) */
    0.078865348162, /* ( 4, 0) */
   -0.290188077617, /* ( 4, 1) */
    0.609005594780, /* ( 4, 2) */
   -0.399620351004, /* ( 4, 3) */
   -0.157493442155, /* ( 4, 4) */
];

// Test data for linear solver

// matrixf_data_linsolve_A [size: 5 x 5]
pub const MATRIXF_DATA_LINSOLVE_A: [f32; 25] = [
    0.359868824482, /* ( 0, 0) */
   -0.821193814278, /* ( 0, 1) */
   -0.267460018396, /* ( 0, 2) */
    0.886115014553, /* ( 0, 3) */
    0.153591111302, /* ( 0, 4) */
    0.298885852098, /* ( 1, 0) */
   -1.239024162292, /* ( 1, 1) */
   -0.948822617531, /* ( 1, 2) */
   -0.779868483543, /* ( 1, 3) */
   -0.334943383932, /* ( 1, 4) */
   -0.071195065975, /* ( 2, 0) */
    0.763968944550, /* ( 2, 1) */
    0.294695496559, /* ( 2, 2) */
    0.060610540211, /* ( 2, 3) */
    0.016189640388, /* ( 2, 4) */
    1.150504231453, /* ( 3, 0) */
   -0.605459213257, /* ( 3, 1) */
    0.055004067719, /* ( 3, 2) */
    1.185544967651, /* ( 3, 3) */
    0.555612862110, /* ( 3, 4) */
    1.054118633270, /* ( 4, 0) */
   -0.494105964899, /* ( 4, 1) */
   -0.824876368046, /* ( 4, 2) */
    0.667240202427, /* ( 4, 3) */
    1.367745161057, /* ( 4, 4) */
];

// matrixf_data_linsolve_x [size: 5 x 1]
pub const MATRIXF_DATA_LINSOLVE_X: [f32; 5] = [
   -0.848446607590, /* ( 0, 0) */
    1.041861057281, /* ( 1, 0) */
    0.453321367502, /* ( 2, 0) */
   -0.949143886566, /* ( 3, 0) */
    1.200846910477, /* ( 4, 0) */
];

// matrixf_data_linsolve_b [size: 5 x 1]
pub const MATRIXF_DATA_LINSOLVE_B: [f32; 5] = [
   -1.938755917550, /* ( 0, 0) */
   -1.636609601788, /* ( 1, 0) */
    0.951859625938, /* ( 2, 0) */
   -2.040058038471, /* ( 3, 0) */
   -0.773941632607, /* ( 4, 0) */
];

// Test data for L/U decomposition

// matrixf_data_ludecomp_A [size: 8 x 8]
pub const MATRIXF_DATA_LUDECOMP_A: [f32; 64] = [
    0.936903119087, /* ( 0, 0) */
    1.048182249069, /* ( 0, 1) */
    0.464600890875, /* ( 0, 2) */
    1.122355699539, /* ( 0, 3) */
   -0.661124527454, /* ( 0, 4) */
   -0.953127145767, /* ( 0, 5) */
   -0.759313285351, /* ( 0, 6) */
    1.418183445930, /* ( 0, 7) */
   -0.272643178701, /* ( 1, 0) */
   -1.166662335396, /* ( 1, 1) */
    1.556591391563, /* ( 1, 2) */
   -0.323065608740, /* ( 1, 3) */
   -0.267991930246, /* ( 1, 4) */
    0.396302074194, /* ( 1, 5) */
    0.238355115056, /* ( 1, 6) */
   -0.437593698502, /* ( 1, 7) */
    0.431114047766, /* ( 2, 0) */
   -0.916567981243, /* ( 2, 1) */
    0.108782351017, /* ( 2, 2) */
   -0.714223206043, /* ( 2, 3) */
    0.197309300303, /* ( 2, 4) */
    1.105972766876, /* ( 2, 5) */
   -0.014590717852, /* ( 2, 6) */
    0.288964867592, /* ( 2, 7) */
    1.536642432213, /* ( 3, 0) */
    1.810190558434, /* ( 3, 1) */
    0.722570478916, /* ( 3, 2) */
    0.184841006994, /* ( 3, 3) */
   -0.239855647087, /* ( 3, 4) */
    0.494688391685, /* ( 3, 5) */
   -0.372100114822, /* ( 3, 6) */
   -0.754012823105, /* ( 3, 7) */
    0.139140784740, /* ( 4, 0) */
   -0.755531311035, /* ( 4, 1) */
    1.567769289017, /* ( 4, 2) */
   -0.774845600128, /* ( 4, 3) */
    1.536481976509, /* ( 4, 4) */
   -1.498587012291, /* ( 4, 5) */
    0.262655615807, /* ( 4, 6) */
   -1.045227766037, /* ( 4, 7) */
    0.445236086845, /* ( 5, 0) */
   -0.573900520802, /* ( 5, 1) */
    0.550646543503, /* ( 5, 2) */
    0.073093712330, /* ( 5, 3) */
    0.700358152390, /* ( 5, 4) */
    0.659417688847, /* ( 5, 5) */
    0.990632474422, /* ( 5, 6) */
   -0.596979260445, /* ( 5, 7) */
   -1.469601035118, /* ( 6, 0) */
   -1.366319775581, /* ( 6, 1) */
   -1.536668300629, /* ( 6, 2) */
    0.301474511623, /* ( 6, 3) */
    0.205486327410, /* ( 6, 4) */
    1.184612751007, /* ( 6, 5) */
    1.984294533730, /* ( 6, 6) */
    0.846946001053, /* ( 6, 7) */
   -0.780786097050, /* ( 7, 0) */
   -1.778358221054, /* ( 7, 1) */
   -0.621561229229, /* ( 7, 2) */
    0.809134125710, /* ( 7, 3) */
   -0.395780056715, /* ( 7, 4) */
    0.095775716007, /* ( 7, 5) */
    1.116999864578, /* ( 7, 6) */
   -0.937837302685, /* ( 7, 7) */
];

// Test data for matrix multiplication

// matrixf_data_mul_x [size: 5 x 4]
pub const MATRIXF_DATA_MUL_X: [f32; 20] = [
   -0.348304957151, /* ( 0, 0) */
    1.638695955276, /* ( 0, 1) */
    0.618153512478, /* ( 0, 2) */
    0.580581486225, /* ( 0, 3) */
    1.125966548920, /* ( 1, 0) */
    0.590879321098, /* ( 1, 1) */
   -0.499333083630, /* ( 1, 2) */
   -0.144607886672, /* ( 1, 3) */
   -0.169909551740, /* ( 2, 0) */
    1.626509308815, /* ( 2, 1) */
   -0.776567280293, /* ( 2, 2) */
   -1.341656446457, /* ( 2, 3) */
    0.492572665215, /* ( 3, 0) */
   -0.075633287430, /* ( 3, 1) */
    1.035362601280, /* ( 3, 2) */
    0.842321217060, /* ( 3, 3) */
   -0.209287241101, /* ( 4, 0) */
   -0.789002001286, /* ( 4, 1) */
   -0.397730469704, /* ( 4, 2) */
    0.034179374576, /* ( 4, 3) */
];

// matrixf_data_mul_y [size: 4 x 3]
pub const MATRIXF_DATA_MUL_Y: [f32; 12] = [
    0.445414155722, /* ( 0, 0) */
    0.233421698213, /* ( 0, 1) */
   -0.682938814163, /* ( 0, 2) */
   -0.934787094593, /* ( 1, 0) */
    0.500407993793, /* ( 1, 1) */
   -0.053248234093, /* ( 1, 2) */
   -0.784089267254, /* ( 2, 0) */
    0.127269089222, /* ( 2, 1) */
   -0.477077603340, /* ( 2, 2) */
   -0.105383664370, /* ( 3, 0) */
   -1.556528329849, /* ( 3, 1) */
   -0.184585332870, /* ( 3, 2) */
];

// matrixf_data_mul_z [size: 5 x 3]
pub const MATRIXF_DATA_MUL_Z: [f32; 15] = [
   -2.232843128510, /* ( 0, 0) */
   -0.086305075740, /* ( 0, 1) */
   -0.251460714553, /* ( 0, 2) */
    0.355936096586, /* ( 1, 0) */
    0.720042365177, /* ( 1, 1) */
   -0.535516414414, /* ( 1, 2) */
   -0.845833288222, /* ( 2, 0) */
    2.763750941354, /* ( 2, 1) */
    0.647562038031, /* ( 2, 2) */
   -0.610483740991, /* ( 3, 0) */
   -1.102197535527, /* ( 3, 1) */
   -0.981798103518, /* ( 3, 2) */
    0.952583633427, /* ( 4, 0) */
   -0.547495051253, /* ( 4, 1) */
    0.368382631550, /* ( 4, 2) */
];

// Test data for Q/R decomposition

// matrixf_data_qrdecomp_A [size: 4 x 4]
pub const MATRIXF_DATA_QRDECOMP_A: [f32; 16] = [
    1.000000000000, /* ( 0, 0) */
    2.000000000000, /* ( 0, 1) */
    3.000000000000, /* ( 0, 2) */
    4.000000000000, /* ( 0, 3) */
    5.000000000000, /* ( 1, 0) */
    5.000000000000, /* ( 1, 1) */
    7.000000000000, /* ( 1, 2) */
    8.000000000000, /* ( 1, 3) */
    6.000000000000, /* ( 2, 0) */
    4.000000000000, /* ( 2, 1) */
    8.000000000000, /* ( 2, 2) */
    7.000000000000, /* ( 2, 3) */
    1.000000000000, /* ( 3, 0) */
    0.000000000000, /* ( 3, 1) */
    3.000000000000, /* ( 3, 2) */
    1.000000000000, /* ( 3, 3) */
];

// matrixf_data_qrdecomp_Q [size: 4 x 4]
pub const MATRIXF_DATA_QRDECOMP_Q: [f32; 16] = [
    0.125988157670, /* ( 0, 0) */
    0.617707763884, /* ( 0, 1) */
    0.571886263590, /* ( 0, 2) */
    0.524890659168, /* ( 0, 3) */
    0.629940788349, /* ( 1, 0) */
    0.494166211107, /* ( 1, 1) */
   -0.137252703262, /* ( 1, 2) */
   -0.583211843520, /* ( 1, 3) */
    0.755928946018, /* ( 2, 0) */
   -0.444749589997, /* ( 2, 1) */
   -0.114377252718, /* ( 2, 2) */
    0.466569474816, /* ( 2, 3) */
    0.125988157670, /* ( 3, 0) */
   -0.420041279441, /* ( 3, 1) */
    0.800640769025, /* ( 3, 2) */
   -0.408248290464, /* ( 3, 3) */
];

// matrixf_data_qrdecomp_R [size: 4 x 4]
pub const MATRIXF_DATA_QRDECOMP_R: [f32; 16] = [
    7.937253933194, /* ( 0, 0) */
    6.425396041157, /* ( 0, 1) */
   11.212946032607, /* ( 0, 2) */
   10.960969717268, /* ( 0, 3) */
    0.000000000000, /* ( 1, 0) */
    1.927248223319, /* ( 1, 1) */
    0.494166211107, /* ( 1, 2) */
    2.890872334978, /* ( 1, 3) */
    0.000000000000, /* ( 2, 0) */
    0.000000000000, /* ( 2, 1) */
    2.241794153271, /* ( 2, 2) */
    1.189523428266, /* ( 2, 3) */
    0.000000000000, /* ( 3, 0) */
    0.000000000000, /* ( 3, 1) */
    0.000000000000, /* ( 3, 2) */
    0.291605921760, /* ( 3, 3) */
];

// Test data for multiply/transpose

// matrixf_data_transmul_x [size: 5 x 4]
pub const MATRIXF_DATA_TRANSMUL_X: [f32; 20] = [
    1.366575479507, /* ( 0, 0) */
    1.982354640961, /* ( 0, 1) */
    0.913504719734, /* ( 0, 2) */
    0.671039104462, /* ( 0, 3) */
    0.264611721039, /* ( 1, 0) */
    0.995791137218, /* ( 1, 1) */
   -1.983934879303, /* ( 1, 2) */
   -0.375840932131, /* ( 1, 3) */
    0.245937779546, /* ( 2, 0) */
   -0.343152791262, /* ( 2, 1) */
   -0.143777698278, /* ( 2, 2) */
   -1.387172579765, /* ( 2, 3) */
    0.781192481518, /* ( 3, 0) */
    1.444583415985, /* ( 3, 1) */
    0.043851174414, /* ( 3, 2) */
    0.399744838476, /* ( 3, 3) */
   -0.488068610430, /* ( 4, 0) */
    0.573721885681, /* ( 4, 1) */
   -1.381630182266, /* ( 4, 2) */
   -0.176615595818, /* ( 4, 3) */
];

// matrixf_data_transmul_xxT [size: 5 x 5]
pub const MATRIXF_DATA_TRANSMUL_XXT: [f32; 25] = [
    7.082042816423, /* ( 0, 0) */
    0.271085233449, /* ( 0, 1) */
   -1.406346640934, /* ( 0, 2) */
    4.239537802168, /* ( 0, 3) */
   -0.910304016309, /* ( 0, 4) */
    0.271085233449, /* ( 1, 0) */
    5.138873363454, /* ( 1, 1) */
    0.529971336750, /* ( 1, 2) */
    1.407977702482, /* ( 1, 3) */
    3.249602173055, /* ( 1, 4) */
   -1.406346640934, /* ( 2, 0) */
    0.529971336750, /* ( 2, 1) */
    2.123159022134, /* ( 2, 2) */
   -0.864407986864, /* ( 2, 3) */
    0.126735142361, /* ( 2, 4) */
    4.239537802168, /* ( 3, 0) */
    1.407977702482, /* ( 3, 1) */
   -0.864407986864, /* ( 3, 2) */
    2.858801800305, /* ( 3, 3) */
    0.316326313589, /* ( 3, 4) */
   -0.910304016309, /* ( 4, 0) */
    3.249602173055, /* ( 4, 1) */
    0.126735142361, /* ( 4, 2) */
    0.316326313589, /* ( 4, 3) */
    2.507462799831, /* ( 4, 4) */
];

// matrixf_data_transmul_xxH [size: 5 x 5]
pub const MATRIXF_DATA_TRANSMUL_XXH: [f32; 25] = [
    7.082042816423, /* ( 0, 0) */
    0.271085233449, /* ( 0, 1) */
   -1.406346640934, /* ( 0, 2) */
    4.239537802168, /* ( 0, 3) */
   -0.910304016309, /* ( 0, 4) */
    0.271085233449, /* ( 1, 0) */
    5.138873363454, /* ( 1, 1) */
    0.529971336750, /* ( 1, 2) */
    1.407977702482, /* ( 1, 3) */
    3.249602173055, /* ( 1, 4) */
   -1.406346640934, /* ( 2, 0) */
    0.529971336750, /* ( 2, 1) */
    2.123159022134, /* ( 2, 2) */
   -0.864407986864, /* ( 2, 3) */
    0.126735142361, /* ( 2, 4) */
    4.239537802168, /* ( 3, 0) */
    1.407977702482, /* ( 3, 1) */
   -0.864407986864, /* ( 3, 2) */
    2.858801800305, /* ( 3, 3) */
    0.316326313589, /* ( 3, 4) */
   -0.910304016309, /* ( 4, 0) */
    3.249602173055, /* ( 4, 1) */
    0.126735142361, /* ( 4, 2) */
    0.316326313589, /* ( 4, 3) */
    2.507462799831, /* ( 4, 4) */
];

// matrixf_data_transmul_xTx [size: 4 x 4]
pub const MATRIXF_DATA_TRANSMUL_XTX: [f32; 16] = [
    2.846505957177, /* ( 0, 0) */
    3.736623075087, /* ( 0, 1) */
    1.396626890644, /* ( 0, 2) */
    0.874893716720, /* ( 0, 3) */
    3.736623075087, /* ( 1, 0) */
    7.455061797501, /* ( 1, 1) */
   -0.844681524592, /* ( 1, 2) */
    1.908127088099, /* ( 1, 3) */
    1.396626890644, /* ( 2, 0) */
   -0.844681524592, /* ( 2, 1) */
    6.701985390860, /* ( 2, 2) */
    1.819632522483, /* ( 2, 3) */
    0.874893716720, /* ( 3, 0) */
    1.908127088099, /* ( 3, 1) */
    1.819632522483, /* ( 3, 2) */
    2.706786656609, /* ( 3, 3) */
];

// matrixf_data_transmul_xHx [size: 4 x 4]
pub const MATRIXF_DATA_TRANSMUL_XHX: [f32; 16] = [
    2.846505957177, /* ( 0, 0) */
    3.736623075087, /* ( 0, 1) */
    1.396626890644, /* ( 0, 2) */
    0.874893716720, /* ( 0, 3) */
    3.736623075087, /* ( 1, 0) */
    7.455061797501, /* ( 1, 1) */
   -0.844681524592, /* ( 1, 2) */
    1.908127088099, /* ( 1, 3) */
    1.396626890644, /* ( 2, 0) */
   -0.844681524592, /* ( 2, 1) */
    6.701985390860, /* ( 2, 2) */
    1.819632522483, /* ( 2, 3) */
    0.874893716720, /* ( 3, 0) */
    1.908127088099, /* ( 3, 1) */
    1.819632522483, /* ( 3, 2) */
    2.706786656609, /* ( 3, 3) */
];

// Test data for matrix addition, complex

// matrixcf_data_add_x [size: 5 x 4]
pub const MATRIXCF_DATA_ADD_X: [Complex<f32>; 20] = [
    Complex::new(1.366575479507, -1.463535666466), /* ( 0, 0) */
    Complex::new(1.982354640961,  0.090445250273), /* ( 0, 1) */
    Complex::new(0.913504719734, -0.689249753952), /* ( 0, 2) */
    Complex::new(0.671039104462, -0.184951126575), /* ( 0, 3) */
    Complex::new(0.264611721039,  0.204716682434), /* ( 1, 0) */
    Complex::new(0.995791137218, -0.192152589560), /* ( 1, 1) */
    Complex::new(-1.983934879303, -0.306251227856), /* ( 1, 2) */
    Complex::new(-0.375840932131, -0.751154422760), /* ( 1, 3) */
    Complex::new(0.245937779546, -0.470900952816), /* ( 2, 0) */
    Complex::new(-0.343152791262,  1.205224752426), /* ( 2, 1) */
    Complex::new(-0.143777698278, -0.457689523697), /* ( 2, 2) */
    Complex::new(-1.387172579765,  0.225333094597), /* ( 2, 3) */
    Complex::new(0.781192481518, -1.102205991745), /* ( 3, 0) */
    Complex::new(1.444583415985,  0.660028517246), /* ( 3, 1) */
    Complex::new(0.043851174414,  0.049496211112), /* ( 3, 2) */
    Complex::new(0.399744838476, -1.435891628265), /* ( 3, 3) */
    Complex::new(-0.488068610430, -0.211131110787), /* ( 4, 0) */
    Complex::new(0.573721885681,  0.016210200265), /* ( 4, 1) */
    Complex::new(-1.381630182266, -0.026558181271), /* ( 4, 2) */
    Complex::new(-0.176615595818, -0.414863616228), /* ( 4, 3) */
];

// matrixcf_data_add_y [size: 5 x 4]
pub const MATRIXCF_DATA_ADD_Y: [Complex<f32>; 20] = [
    Complex::new(-0.345586329699,  0.240964725614), /* ( 0, 0) */
    Complex::new(-0.025732314214,  1.212726473808), /* ( 0, 1) */
    Complex::new(0.907316803932,  1.614625453949), /* ( 0, 2) */
    Complex::new(-1.277831077576, -0.193561494350), /* ( 0, 3) */
    Complex::new(-0.566267848015, -0.477513909340), /* ( 1, 0) */
    Complex::new(-0.220387980342,  0.152425482869), /* ( 1, 1) */
    Complex::new(1.062286615372, -1.132043361664), /* ( 1, 2) */
    Complex::new(0.560977220535, -0.981467425823), /* ( 1, 3) */
    Complex::new(0.025816366076, -0.697246491909), /* ( 2, 0) */
    Complex::new(0.658244788647, -1.403432965279), /* ( 2, 1) */
    Complex::new(-1.326129436493, -0.529069602489), /* ( 2, 2) */
    Complex::new(-1.535833358765, -1.406206607819), /* ( 2, 3) */
    Complex::new(0.101660177112, -1.552777647972), /* ( 3, 0) */
    Complex::new(1.834807038307,  0.647780478001), /* ( 3, 1) */
    Complex::new(-0.620168924332, -0.103246472776), /* ( 3, 2) */
    Complex::new(-0.063054643571, -0.756766498089), /* ( 3, 3) */
    Complex::new(0.280569136143,  0.560459613800), /* ( 4, 0) */
    Complex::new(-0.069713011384, -0.971132814884), /* ( 4, 1) */
    Complex::new(0.225165605545, -1.117488980293), /* ( 4, 2) */
    Complex::new(-0.290932357311,  0.302335798740), /* ( 4, 3) */
];

// matrixcf_data_add_z [size: 5 x 4]
pub const MATRIXCF_DATA_ADD_Z: [Complex<f32>; 20] = [
    Complex::new(1.020989149809, -1.222570940852), /* ( 0, 0) */
    Complex::new(1.956622326747,  1.303171724081), /* ( 0, 1) */
    Complex::new(1.820821523666,  0.925375699997), /* ( 0, 2) */
    Complex::new(-0.606791973114, -0.378512620926), /* ( 0, 3) */
    Complex::new(-0.301656126976, -0.272797226906), /* ( 1, 0) */
    Complex::new(0.775403156877, -0.039727106690), /* ( 1, 1) */
    Complex::new(-0.921648263931, -1.438294589520), /* ( 1, 2) */
    Complex::new(0.185136288404, -1.732621848583), /* ( 1, 3) */
    Complex::new(0.271754145622, -1.168147444725), /* ( 2, 0) */
    Complex::new(0.315091997385, -0.198208212852), /* ( 2, 1) */
    Complex::new(-1.469907134771, -0.986759126186), /* ( 2, 2) */
    Complex::new(-2.923005938530, -1.180873513222), /* ( 2, 3) */
    Complex::new(0.882852658629, -2.654983639717), /* ( 3, 0) */
    Complex::new(3.279390454292,  1.307808995247), /* ( 3, 1) */
    Complex::new(-0.576317749918, -0.053750261664), /* ( 3, 2) */
    Complex::new(0.336690194905, -2.192658126354), /* ( 3, 3) */
    Complex::new(-0.207499474287,  0.349328503013), /* ( 4, 0) */
    Complex::new(0.504008874297, -0.954922614619), /* ( 4, 1) */
    Complex::new(-1.156464576721, -1.144047161564), /* ( 4, 2) */
    Complex::new(-0.467547953129, -0.112527817488), /* ( 4, 3) */
];

// Test data for matrix augmentation, complex

// matrixcf_data_aug_x [size: 5 x 4]
pub const MATRIXCF_DATA_AUG_X: [Complex<f32>; 20] = [
    Complex::new(-1.383545994759,  0.803655147552), /* ( 0, 0) */
    Complex::new(-0.918114125729, -1.194809913635), /* ( 0, 1) */
    Complex::new( 0.090901032090,  0.484884619713), /* ( 0, 2) */
    Complex::new( 0.109402157366,  1.450437188148), /* ( 0, 3) */
    Complex::new(-2.269510746002, -0.606436431408), /* ( 1, 0) */
    Complex::new(-0.195189133286,  0.416639328003), /* ( 1, 1) */
    Complex::new( 1.940145850182,  0.895506143570), /* ( 1, 2) */
    Complex::new(-0.784153759480, -0.345893263817), /* ( 1, 3) */
    Complex::new( 0.652509629726,  0.994532823563), /* ( 2, 0) */
    Complex::new(-2.253150939941,  0.327611356974), /* ( 2, 1) */
    Complex::new( 1.012208938599, -0.677044689655), /* ( 2, 2) */
    Complex::new(-0.700399398804, -0.330108255148), /* ( 2, 3) */
    Complex::new(-1.175772666931,  0.248428389430), /* ( 3, 0) */
    Complex::new( 0.412228941917, -2.519471645355), /* ( 3, 1) */
    Complex::new(-1.667356371880, -1.187105178833), /* ( 3, 2) */
    Complex::new( 1.243350982666, -0.736937880516), /* ( 3, 3) */
    Complex::new( 0.033468723297,  0.131351217628), /* ( 4, 0) */
    Complex::new(-0.617851972580,  1.434038400650), /* ( 4, 1) */
    Complex::new(-1.009798288345,  0.758803665638), /* ( 4, 2) */
    Complex::new( 1.450994849205, -0.595933079720), /* ( 4, 3) */
];

// matrixcf_data_aug_y [size: 5 x 3]
pub const MATRIXCF_DATA_AUG_Y: [Complex<f32>; 15] = [
    Complex::new( 0.301848381758,  0.353115469217), /* ( 0, 0) */
    Complex::new( 0.703616917133,  0.044240720570), /* ( 0, 1) */
    Complex::new( 0.268176555634,  1.071476221085), /* ( 0, 2) */
    Complex::new(-0.717849135399, -0.764326214790), /* ( 1, 0) */
    Complex::new(-0.108926303685, -0.315297245979), /* ( 1, 1) */
    Complex::new( 0.357895255089, -1.419853448868), /* ( 1, 2) */
    Complex::new(-0.831380963326,  1.003911018372), /* ( 2, 0) */
    Complex::new(-0.361211270094, -0.926369905472), /* ( 2, 1) */
    Complex::new( 2.307183980942, -0.432167291641), /* ( 2, 2) */
    Complex::new(-0.694230437279, -1.021739125252), /* ( 3, 0) */
    Complex::new( 0.412434548140, -1.840429663658), /* ( 3, 1) */
    Complex::new( 0.342358648777, -1.084336757660), /* ( 3, 2) */
    Complex::new(-0.314995974302, -0.811702668667), /* ( 4, 0) */
    Complex::new( 0.912520587444, -2.686280250549), /* ( 4, 1) */
    Complex::new( 0.204153224826, -0.616621196270), /* ( 4, 2) */
];

// matrixcf_data_aug_z [size: 5 x 7]
pub const MATRIXCF_DATA_AUG_Z: [Complex<f32>; 35] = [
    Complex::new(-1.383545994759,  0.803655147552), /* ( 0, 0) */
    Complex::new(-0.918114125729, -1.194809913635), /* ( 0, 1) */
    Complex::new( 0.090901032090,  0.484884619713), /* ( 0, 2) */
    Complex::new( 0.109402157366,  1.450437188148), /* ( 0, 3) */
    Complex::new( 0.301848381758,  0.353115469217), /* ( 0, 4) */
    Complex::new( 0.703616917133,  0.044240720570), /* ( 0, 5) */
    Complex::new( 0.268176555634,  1.071476221085), /* ( 0, 6) */
    Complex::new(-2.269510746002, -0.606436431408), /* ( 1, 0) */
    Complex::new(-0.195189133286,  0.416639328003), /* ( 1, 1) */
    Complex::new( 1.940145850182,  0.895506143570), /* ( 1, 2) */
    Complex::new(-0.784153759480, -0.345893263817), /* ( 1, 3) */
    Complex::new(-0.717849135399, -0.764326214790), /* ( 1, 4) */
    Complex::new(-0.108926303685, -0.315297245979), /* ( 1, 5) */
    Complex::new( 0.357895255089, -1.419853448868), /* ( 1, 6) */
    Complex::new( 0.652509629726,  0.994532823563), /* ( 2, 0) */
    Complex::new(-2.253150939941,  0.327611356974), /* ( 2, 1) */
    Complex::new( 1.012208938599, -0.677044689655), /* ( 2, 2) */
    Complex::new(-0.700399398804, -0.330108255148), /* ( 2, 3) */
    Complex::new(-0.831380963326,  1.003911018372), /* ( 2, 4) */
    Complex::new(-0.361211270094, -0.926369905472), /* ( 2, 5) */
    Complex::new( 2.307183980942, -0.432167291641), /* ( 2, 6) */
    Complex::new(-1.175772666931,  0.248428389430), /* ( 3, 0) */
    Complex::new( 0.412228941917, -2.519471645355), /* ( 3, 1) */
    Complex::new(-1.667356371880, -1.187105178833), /* ( 3, 2) */
    Complex::new( 1.243350982666, -0.736937880516), /* ( 3, 3) */
    Complex::new(-0.694230437279, -1.021739125252), /* ( 3, 4) */
    Complex::new( 0.412434548140, -1.840429663658), /* ( 3, 5) */
    Complex::new( 0.342358648777, -1.084336757660), /* ( 3, 6) */
    Complex::new( 0.033468723297,  0.131351217628), /* ( 4, 0) */
    Complex::new(-0.617851972580,  1.434038400650), /* ( 4, 1) */
    Complex::new(-1.009798288345,  0.758803665638), /* ( 4, 2) */
    Complex::new( 1.450994849205, -0.595933079720), /* ( 4, 3) */
    Complex::new(-0.314995974302, -0.811702668667), /* ( 4, 4) */
    Complex::new( 0.912520587444, -2.686280250549), /* ( 4, 5) */
    Complex::new( 0.204153224826, -0.616621196270), /* ( 4, 6) */
];

// Test data for matrix Cholesky decomposition, complex

// matrixcf_data_chol_L [size: 4 x 4]
pub const MATRIXCF_DATA_CHOL_L: [Complex<f32>; 16] = [
    Complex::new( 1.010000000000,  0.000000000000), /* ( 0, 0) */
    Complex::new( 0.000000000000,  0.000000000000), /* ( 0, 1) */
    Complex::new( 0.000000000000,  0.000000000000), /* ( 0, 2) */
    Complex::new( 0.000000000000,  0.000000000000), /* ( 0, 3) */
    Complex::new(-1.420000000000,  0.250000000000), /* ( 1, 0) */
    Complex::new( 0.500000000000,  0.000000000000), /* ( 1, 1) */
    Complex::new( 0.000000000000,  0.000000000000), /* ( 1, 2) */
    Complex::new( 0.000000000000,  0.000000000000), /* ( 1, 3) */
    Complex::new( 0.320000000000, -1.230000000000), /* ( 2, 0) */
    Complex::new( 2.010000000000,  0.780000000000), /* ( 2, 1) */
    Complex::new( 0.300000000000,  0.000000000000), /* ( 2, 2) */
    Complex::new( 0.000000000000,  0.000000000000), /* ( 2, 3) */
    Complex::new(-1.020000000000,  1.020000000000), /* ( 3, 0) */
    Complex::new(-0.320000000000, -0.030000000000), /* ( 3, 1) */
    Complex::new(-1.650000000000,  2.010000000000), /* ( 3, 2) */
    Complex::new( 1.070000000000,  0.000000000000), /* ( 3, 3) */
];

// matrixcf_data_chol_A [size: 4 x 4]
pub const MATRIXCF_DATA_CHOL_A: [Complex<f32>; 16] = [
    Complex::new( 1.020100000000,  0.000000000000), /* ( 0, 0) */
    Complex::new(-1.434200000000, -0.252500000000), /* ( 0, 1) */
    Complex::new( 0.323200000000,  1.242300000000), /* ( 0, 2) */
    Complex::new(-1.030200000000, -1.030200000000), /* ( 0, 3) */
    Complex::new(-1.434200000000,  0.252500000000), /* ( 1, 0) */
    Complex::new( 2.328900000000,  0.000000000000), /* ( 1, 1) */
    Complex::new( 0.243100000000, -2.056600000000), /* ( 1, 2) */
    Complex::new( 1.543400000000,  1.208400000000), /* ( 1, 3) */
    Complex::new( 0.323200000000, -1.242300000000), /* ( 2, 0) */
    Complex::new( 0.243100000000,  2.056600000000), /* ( 2, 1) */
    Complex::new( 6.353800000000,  0.000000000000), /* ( 2, 2) */
    Complex::new(-2.742600000000,  0.135900000000), /* ( 2, 3) */
    Complex::new(-1.030200000000,  1.030200000000), /* ( 3, 0) */
    Complex::new( 1.543400000000, -1.208400000000), /* ( 3, 1) */
    Complex::new(-2.742600000000, -0.135900000000), /* ( 3, 2) */
    Complex::new(10.091600000000,  0.000000000000), /* ( 3, 3) */
];

// Test data for matrix inverse, complex

// matrixcf_data_inv_x [size: 5 x 5]
pub const MATRIXCF_DATA_INV_X: [Complex<f32>; 25] = [
    Complex::new(-0.911099433899, -0.436777323484), /* ( 0, 0) */
    Complex::new( 0.598295390606, -0.283340752125), /* ( 0, 1) */
    Complex::new(-0.264758616686, -0.421906232834), /* ( 0, 2) */
    Complex::new(-0.066837862134, -0.934806823730), /* ( 0, 3) */
    Complex::new( 0.393610686064, -1.011345505714), /* ( 0, 4) */
    Complex::new(-0.543692529202, -1.426580429077), /* ( 1, 0) */
    Complex::new(-1.006833553314,  0.448534607887), /* ( 1, 1) */
    Complex::new( 0.048818156123, -0.540948212147), /* ( 1, 2) */
    Complex::new( 0.180871278048,  0.331172674894), /* ( 1, 3) */
    Complex::new(-1.100448012352,  1.841731786728), /* ( 1, 4) */
    Complex::new( 2.341797351837, -1.200128436089), /* ( 2, 0) */
    Complex::new( 0.239693909883,  0.206349417567), /* ( 2, 1) */
    Complex::new(-0.815828502178, -0.349400132895), /* ( 2, 2) */
    Complex::new( 1.213637232780,  0.298941820860), /* ( 2, 3) */
    Complex::new(-1.522765398026,  1.651986479759), /* ( 2, 4) */
    Complex::new( 1.481738448143,  0.055169839412), /* ( 3, 0) */
    Complex::new(-1.241538286209, -0.077680915594), /* ( 3, 1) */
    Complex::new( 1.046607017517, -0.843883395195), /* ( 3, 2) */
    Complex::new(-1.564810752869,  1.346152186394), /* ( 3, 3) */
    Complex::new( 0.786287426949, -1.010108113289), /* ( 3, 4) */
    Complex::new( 1.234361886978, -1.305809140205), /* ( 4, 0) */
    Complex::new( 0.053748749197,  0.403882414103), /* ( 4, 1) */
    Complex::new(-0.081336200237, -0.462558329105), /* ( 4, 2) */
    Complex::new(-1.370563983917, -0.284755766392), /* ( 4, 3) */
    Complex::new( 0.200873896480, -0.036809749901), /* ( 4, 4) */
];

// matrixcf_data_inv_y [size: 5 x 5]
pub const MATRIXCF_DATA_INV_Y: [Complex<f32>; 25] = [
    Complex::new(-0.127852678827, -0.009178191835), /* ( 0, 0) */
    Complex::new(-0.199905444866,  0.033789259175), /* ( 0, 1) */
    Complex::new( 0.168465876479, -0.059607902071), /* ( 0, 2) */
    Complex::new( 0.087700609092, -0.030597427908), /* ( 0, 3) */
    Complex::new( 0.084793376582,  0.131223765916), /* ( 0, 4) */
    Complex::new( 0.209779356201,  0.642123753363), /* ( 1, 0) */
    Complex::new(-0.045651767577, -0.019599459364), /* ( 1, 1) */
    Complex::new( 0.137284052424,  0.504637287094), /* ( 1, 2) */
    Complex::new(-0.333643348460,  0.455368743084), /* ( 1, 3) */
    Complex::new( 0.244939020151, -0.609710193351), /* ( 1, 4) */
    Complex::new(-0.114524820581,  0.963012925652), /* ( 2, 0) */
    Complex::new( 0.303499486096,  0.348121666797), /* ( 2, 1) */
    Complex::new(-0.327372880299,  0.397314645420), /* ( 2, 2) */
    Complex::new(-0.231096370464,  0.372958732742), /* ( 2, 3) */
    Complex::new( 0.089363987094, -0.240520272187), /* ( 2, 4) */
    Complex::new( 0.072169240922,  0.159456098576), /* ( 3, 0) */
    Complex::new(-0.064066539188,  0.069570707500), /* ( 3, 1) */
    Complex::new( 0.090335627717, -0.121329478735), /* ( 3, 2) */
    Complex::new( 0.053196220990, -0.158230982223), /* ( 3, 3) */
    Complex::new(-0.413653285108,  0.167815066469), /* ( 3, 4) */
    Complex::new( 0.089194647874, -0.035492413461), /* ( 4, 0) */
    Complex::new(-0.192303472410, -0.221655891788), /* ( 4, 1) */
    Complex::new( 0.111730542618, -0.221903756183), /* ( 4, 2) */
    Complex::new( 0.303835472120, -0.022543572811), /* ( 4, 3) */
    Complex::new(-0.167008031325,  0.051911194273), /* ( 4, 4) */
];

// Test data for linear solver, complex

// matrixcf_data_linsolve_A [size: 5 x 5]
pub const MATRIXCF_DATA_LINSOLVE_A: [Complex<f32>; 25] = [
    Complex::new(-0.482884645462, -0.221723198891), /* ( 0, 0) */
    Complex::new(-0.387645065784,  0.086682170630), /* ( 0, 1) */
    Complex::new( 1.580931067467,  0.883717715740), /* ( 0, 2) */
    Complex::new( 1.570333838463,  1.783135294914), /* ( 0, 3) */
    Complex::new(-1.081483244896, -0.691094517708), /* ( 0, 4) */
    Complex::new( 0.248138338327, -0.250954031944), /* ( 1, 0) */
    Complex::new( 0.790891706944, -0.313775628805), /* ( 1, 1) */
    Complex::new(-0.146090522408, -1.320674061775), /* ( 1, 2) */
    Complex::new( 0.672296106815,  1.346951484680), /* ( 1, 3) */
    Complex::new(-0.352442741394,  0.056975554675), /* ( 1, 4) */
    Complex::new( 0.707973957062, -0.069402769208), /* ( 2, 0) */
    Complex::new(-0.894841134548, -1.854133605957), /* ( 2, 1) */
    Complex::new( 0.397095054388, -0.924011290073), /* ( 2, 2) */
    Complex::new( 0.054669041187,  0.017023870721), /* ( 2, 3) */
    Complex::new( 0.515784740448, -0.455956429243), /* ( 2, 4) */
    Complex::new( 0.570774257183,  0.538610219955), /* ( 3, 0) */
    Complex::new(-0.389531791210,  0.200702637434), /* ( 3, 1) */
    Complex::new( 0.159817531705,  1.283960223198), /* ( 3, 2) */
    Complex::new( 1.571215510368,  0.574963092804), /* ( 3, 3) */
    Complex::new(-2.452192783356, -0.583715677261), /* ( 3, 4) */
    Complex::new(-0.603657603264,  0.617622077465), /* ( 4, 0) */
    Complex::new( 0.935181498528,  0.949800848961), /* ( 4, 1) */
    Complex::new( 0.043205004185,  1.351160168648), /* ( 4, 2) */
    Complex::new( 0.674502849579,  0.340750336647), /* ( 4, 3) */
    Complex::new(-0.241452947259,  1.540177464485), /* ( 4, 4) */
];

// matrixcf_data_linsolve_x [size: 5 x 1]
pub const MATRIXCF_DATA_LINSOLVE_X: [Complex<f32>; 5] = [
    Complex::new(-0.686784207821,  0.516409814358), /* ( 0, 0) */
    Complex::new( 0.725918948650, -0.725804686546), /* ( 1, 0) */
    Complex::new( 0.048043362796,  1.415739893913), /* ( 2, 0) */
    Complex::new( 1.184294700623, -1.108955144882), /* ( 3, 0) */
    Complex::new( 1.000079274178,  0.117630988359), /* ( 4, 0) */
];

// matrixcf_data_linsolve_b [size: 5 x 1]
pub const MATRIXCF_DATA_LINSOLVE_B: [Complex<f32>; 5] = [
    Complex::new( 1.889372086452,  2.079795053851), /* ( 0, 0) */
    Complex::new( 4.099006087145,  0.093571115573), /* ( 1, 0) */
    Complex::new(-0.465385431770, -0.201195243205), /* ( 2, 0) */
    Complex::new(-2.502649126311, -1.292489487343), /* ( 3, 0) */
    Complex::new( 0.307098947642,  0.568345470088), /* ( 4, 0) */
];

// Test data for matrix LU decomposition, complex

// matrixcf_data_ludecomp_A [size: 8 x 8]
pub const MATRIXCF_DATA_LUDECOMP_A: [Complex<f32>; 64] = [
    Complex::new( 0.455808967352,  0.239869371057), /* ( 0, 0) */
    Complex::new( 1.076113820076,  0.303303003311), /* ( 0, 1) */
    Complex::new(-1.174549579620, -1.593330740929), /* ( 0, 2) */
    Complex::new( 1.428434848785, -2.108702898026), /* ( 0, 3) */
    Complex::new( 1.944794058800,  1.039716124535), /* ( 0, 4) */
    Complex::new(-0.003220892511, -1.070197224617), /* ( 0, 5) */
    Complex::new( 2.282850980759,  0.567153334618), /* ( 0, 6) */
    Complex::new( 0.677789986134, -0.110934779048), /* ( 0, 7) */
    Complex::new(-0.541479706764,  0.508462309837), /* ( 1, 0) */
    Complex::new( 0.659551382065,  0.341979026794), /* ( 1, 1) */
    Complex::new( 0.422295093536, -0.748002707958), /* ( 1, 2) */
    Complex::new( 0.991572380066, -1.739566326141), /* ( 1, 3) */
    Complex::new(-0.973251938820, -0.314995020628), /* ( 1, 4) */
    Complex::new(-0.348222613335,  1.216362476349), /* ( 1, 5) */
    Complex::new(-0.444941103458, -0.435953140259), /* ( 1, 6) */
    Complex::new( 0.664277911186,  0.398205667734), /* ( 1, 7) */
    Complex::new( 1.578197240829, -0.245545297861), /* ( 2, 0) */
    Complex::new(-0.734657287598, -0.314642846584), /* ( 2, 1) */
    Complex::new(-0.185400843620,  0.411517560482), /* ( 2, 2) */
    Complex::new(-0.141458645463,  2.540255069733), /* ( 2, 3) */
    Complex::new(-1.887707233429,  1.261052608490), /* ( 2, 4) */
    Complex::new( 1.356706976891, -0.073478087783), /* ( 2, 5) */
    Complex::new( 0.382849365473,  1.176013708115), /* ( 2, 6) */
    Complex::new( 0.088731415570, -0.000313452416), /* ( 2, 7) */
    Complex::new( 0.694614350796,  0.107012517750), /* ( 3, 0) */
    Complex::new(-0.541421890259, -1.525843501091), /* ( 3, 1) */
    Complex::new( 1.210077285767, -0.249905958772), /* ( 3, 2) */
    Complex::new( 0.051122765988,  0.576834678650), /* ( 3, 3) */
    Complex::new( 2.360952138901, -0.439353585243), /* ( 3, 4) */
    Complex::new( 0.927220702171,  0.293185442686), /* ( 3, 5) */
    Complex::new(-0.235832184553, -0.484229415655), /* ( 3, 6) */
    Complex::new(-1.589996099472,  0.180045768619), /* ( 3, 7) */
    Complex::new( 1.345695137978, -0.080361045897), /* ( 4, 0) */
    Complex::new(-0.245824366808, -1.841626405716), /* ( 4, 1) */
    Complex::new( 0.978698849678,  1.369340777397), /* ( 4, 2) */
    Complex::new(-1.106017351151, -1.615537166595), /* ( 4, 3) */
    Complex::new( 0.627505123615,  1.024900913239), /* ( 4, 4) */
    Complex::new( 1.808397769928, -0.614134788513), /* ( 4, 5) */
    Complex::new(-0.322292149067, -0.765307128429), /* ( 4, 6) */
    Complex::new(-0.674273192883,  0.044275555760), /* ( 4, 7) */
    Complex::new(-2.861634492874,  2.582857608795), /* ( 5, 0) */
    Complex::new(-1.920535564423, -0.081001155078), /* ( 5, 1) */
    Complex::new(-1.339942932129, -0.246527969837), /* ( 5, 2) */
    Complex::new( 0.540911912918,  0.283990591764), /* ( 5, 3) */
    Complex::new(-0.800716042519,  0.764756917953), /* ( 5, 4) */
    Complex::new( 1.206449866295,  0.518103539944), /* ( 5, 5) */
    Complex::new(-0.377558648586,  0.065486297011), /* ( 5, 6) */
    Complex::new(-1.090067625046,  0.741791069508), /* ( 5, 7) */
    Complex::new(-1.424072742462,  0.091005645692), /* ( 6, 0) */
    Complex::new( 0.340615779161,  1.995890378952), /* ( 6, 1) */
    Complex::new(-0.395366579294,  0.685165762901), /* ( 6, 2) */
    Complex::new( 0.367168039083, -1.265154719353), /* ( 6, 3) */
    Complex::new( 0.716018438339,  1.003421306610), /* ( 6, 4) */
    Complex::new(-0.648339152336,  2.441966056824), /* ( 6, 5) */
    Complex::new( 0.788251757622,  1.254729628563), /* ( 6, 6) */
    Complex::new(-0.776828289032, -0.615517139435), /* ( 6, 7) */
    Complex::new( 1.112848401070, -0.297139286995), /* ( 7, 0) */
    Complex::new( 0.366721868515,  0.650049626827), /* ( 7, 1) */
    Complex::new( 0.072020366788, -0.518339037895), /* ( 7, 2) */
    Complex::new( 1.033115744591, -0.196805760264), /* ( 7, 3) */
    Complex::new(-1.083071947098, -1.565491795540), /* ( 7, 4) */
    Complex::new( 1.409144878387,  0.992799341679), /* ( 7, 5) */
    Complex::new( 0.387732833624, -1.445696353912), /* ( 7, 6) */
    Complex::new(-0.528750956059, -1.205648779869), /* ( 7, 7) */
];

// Test data for matrix multiplication, complex

// matrixcf_data_mul_x [size: 5 x 4]
pub const MATRIXCF_DATA_MUL_X: [Complex<f32>; 20] = [
    Complex::new( 1.131277322769, -2.908640623093), /* ( 0, 0) */
    Complex::new( 0.847201466560, -1.637244105339), /* ( 0, 1) */
    Complex::new(-2.173580169678,  0.096817605197), /* ( 0, 2) */
    Complex::new( 0.792498826981, -0.358158409595), /* ( 0, 3) */
    Complex::new(-0.243082717061,  0.824095964432), /* ( 1, 0) */
    Complex::new(-1.889652967453,  0.283876717091), /* ( 1, 1) */
    Complex::new( 0.044418141246, -0.882465064526), /* ( 1, 2) */
    Complex::new( 0.515216410160, -0.366532146931), /* ( 1, 3) */
    Complex::new( 0.579283773899,  1.173513293266), /* ( 2, 0) */
    Complex::new( 0.059265002608, -0.497733235359), /* ( 2, 1) */
    Complex::new(-0.877321839333,  0.404732406139), /* ( 2, 2) */
    Complex::new(-0.794282734394,  0.456011295319), /* ( 2, 3) */
    Complex::new(-1.174414634705, -1.358565688133), /* ( 3, 0) */
    Complex::new(-0.418152034283,  1.380919337273), /* ( 3, 1) */
    Complex::new(-0.747197151184,  1.584241986275), /* ( 3, 2) */
    Complex::new(-0.522293865681, -0.573823392391), /* ( 3, 3) */
    Complex::new(-1.866284489632, -0.199214607477), /* ( 4, 0) */
    Complex::new(-0.453905433416,  0.452787637711), /* ( 4, 1) */
    Complex::new( 1.989426016808, -1.771166682243), /* ( 4, 2) */
    Complex::new( 2.234328985214,  0.855401337147), /* ( 4, 3) */
];

// matrixcf_data_mul_y [size: 4 x 3]
pub const MATRIXCF_DATA_MUL_Y: [Complex<f32>; 12] = [
    Complex::new( 0.122429788113, -1.041572093964), /* ( 0, 0) */
    Complex::new(-1.123313307762, -1.396123170853), /* ( 0, 1) */
    Complex::new(-0.318034142256, -0.537796914577), /* ( 0, 2) */
    Complex::new( 0.096901215613, -0.035752061754), /* ( 1, 0) */
    Complex::new( 0.423960685730, -0.379842221737), /* ( 1, 1) */
    Complex::new(-0.184147700667,  0.022100308910), /* ( 1, 2) */
    Complex::new( 0.189968794584,  0.919595599174), /* ( 2, 0) */
    Complex::new( 0.621766507626, -0.634516119957), /* ( 2, 1) */
    Complex::new( 0.605251312256,  1.410223841667), /* ( 2, 2) */
    Complex::new( 0.427330523729,  0.042397715151), /* ( 3, 0) */
    Complex::new( 0.204851210117,  0.611065924168), /* ( 3, 1) */
    Complex::new( 0.562124013901,  0.047597970814), /* ( 3, 2) */
];

// matrixcf_data_mul_z [size: 5 x 3]
pub const MATRIXCF_DATA_MUL_Z: [Complex<f32>; 15] = [
    Complex::new(-3.015598273252, -3.823225604286), /* ( 0, 0) */
    Complex::new(-6.503138041472,  2.522251659946), /* ( 0, 1) */
    Complex::new(-3.033435877267, -2.533375977709), /* ( 0, 2) */
    Complex::new( 1.711291176504,  0.187568584413), /* ( 1, 0) */
    Complex::new( 0.527484730969, -0.085346610822), /* ( 1, 1) */
    Complex::new( 2.440625470928, -0.878385559540), /* ( 1, 2) */
    Complex::new( 0.383559143593, -1.078745633782), /* ( 2, 0) */
    Complex::new( 0.093675017974, -1.944126015771), /* ( 2, 1) */
    Complex::new(-1.122987739839, -1.365514815630), /* ( 2, 2) */
    Complex::new(-3.347645581625,  0.552152171890), /* ( 3, 0) */
    Complex::new( 0.554058303745,  4.932442551750), /* ( 3, 1) */
    Complex::new(-3.263304464031,  0.357861697730), /* ( 3, 2) */
    Complex::new( 2.461434774758,  3.932854324787), /* ( 4, 0) */
    Complex::new( 1.845966920717,  2.370697350446), /* ( 4, 1) */
    Complex::new( 5.477082880684,  3.294354034834), /* ( 4, 2) */
];

// Test data for matrix QR decomposition, complex

// matrixcf_data_qrdecomp_A [size: 4 x 4]
pub const MATRIXCF_DATA_QRDECOMP_A: [Complex<f32>; 16] = [
    Complex::new( 2.114020000000, -0.576040000000), /* ( 0, 0) */
    Complex::new( 0.417500000000,  1.008330000000), /* ( 0, 1) */
    Complex::new(-0.962640000000, -3.621960000000), /* ( 0, 2) */
    Complex::new(-0.206790000000, -1.026680000000), /* ( 0, 3) */
    Complex::new( 0.008540000000,  1.616260000000), /* ( 1, 0) */
    Complex::new( 0.846950000000, -0.327360000000), /* ( 1, 1) */
    Complex::new(-1.018620000000, -1.107860000000), /* ( 1, 2) */
    Complex::new(-1.788770000000,  1.844560000000), /* ( 1, 3) */
    Complex::new(-2.979010000000, -1.303840000000), /* ( 2, 0) */
    Complex::new( 0.522890000000,  1.891100000000), /* ( 2, 1) */
    Complex::new( 1.325760000000, -0.367370000000), /* ( 2, 2) */
    Complex::new( 0.047170000000,  0.206280000000), /* ( 2, 3) */
    Complex::new( 0.289700000000,  0.642470000000), /* ( 3, 0) */
    Complex::new(-0.559160000000,  0.683020000000), /* ( 3, 1) */
    Complex::new( 1.406150000000,  0.623980000000), /* ( 3, 2) */
    Complex::new(-0.127670000000, -0.539970000000), /* ( 3, 3) */
];

// matrixcf_data_qrdecomp_Q [size: 4 x 4]
pub const MATRIXCF_DATA_QRDECOMP_Q: [Complex<f32>; 16] = [
    Complex::new( 0.491706158979, -0.133982845866), /* ( 0, 0) */
    Complex::new( 0.429660711419,  0.559833033911), /* ( 0, 1) */
    Complex::new(-0.309333641162, -0.278321211351), /* ( 0, 2) */
    Complex::new( 0.215207397547, -0.150957196713), /* ( 0, 3) */
    Complex::new( 0.001986343837,  0.375930689639), /* ( 1, 0) */
    Complex::new( 0.242768204454,  0.009257007128), /* ( 1, 1) */
    Complex::new(-0.422306122793, -0.032511505165), /* ( 1, 2) */
    Complex::new(-0.503566009661,  0.605534385769), /* ( 1, 3) */
    Complex::new(-0.692896739226, -0.303263998601), /* ( 2, 0) */
    Complex::new( 0.054111560749,  0.468071856237), /* ( 2, 1) */
    Complex::new(-0.082147488614,  0.069653107384), /* ( 2, 2) */
    Complex::new( 0.279669645547,  0.340721083028), /* ( 2, 3) */
    Complex::new( 0.067382179098,  0.149433995875), /* ( 3, 0) */
    Complex::new(-0.270466351267,  0.384428384950), /* ( 3, 1) */
    Complex::new(-0.285071449427,  0.744704670261), /* ( 3, 2) */
    Complex::new(-0.173581995183, -0.293616086507), /* ( 3, 3) */
];

// matrixcf_data_qrdecomp_R [size: 4 x 4]
pub const MATRIXCF_DATA_QRDECOMP_R: [Complex<f32>; 16] = [
    Complex::new( 4.299356356224,  0.000000000000), /* ( 0, 0) */
    Complex::new(-0.922616273377, -0.789487259898), /* ( 0, 1) */
    Complex::new(-1.025768821795, -1.040664085433), /* ( 0, 2) */
    Complex::new( 0.541217397816, -0.002345615451), /* ( 0, 3) */
    Complex::new( 0.000000000000,  0.000000000000), /* ( 1, 0) */
    Complex::new( 2.273733268802,  0.000000000000), /* ( 1, 1) */
    Complex::new(-2.939502710322, -2.626579524510), /* ( 1, 2) */
    Complex::new(-1.154743344912,  0.323209860623), /* ( 1, 3) */
    Complex::new( 0.000000000000,  0.000000000000), /* ( 2, 0) */
    Complex::new( 0.000000000000,  0.000000000000), /* ( 2, 1) */
    Complex::new( 1.701364174878,  0.000000000000), /* ( 2, 2) */
    Complex::new( 0.689923063328, -0.348316412767), /* ( 2, 3) */
    Complex::new( 0.000000000000,  0.000000000000), /* ( 3, 0) */
    Complex::new( 0.000000000000,  0.000000000000), /* ( 3, 1) */
    Complex::new( 0.000000000000,  0.000000000000), /* ( 3, 2) */
    Complex::new( 2.392371328442,  0.000000000000), /* ( 3, 3) */
];

// Test data for multiply/transpose, complex

// matrixcf_data_transmul_x [size: 5 x 4]
pub const MATRIXCF_DATA_TRANSMUL_X: [Complex<f32>; 20] = [
    Complex::new( 0.897770464420, -1.137341141701), /* ( 0, 0) */
    Complex::new( 0.816529691219, -0.575469911098), /* ( 0, 1) */
    Complex::new( 2.407611131668,  0.901603281498), /* ( 0, 2) */
    Complex::new(-1.024818181992, -1.785745739937), /* ( 0, 3) */
    Complex::new( 1.494256496429, -0.826167643070), /* ( 1, 0) */
    Complex::new(-0.908512234688,  0.119766108692), /* ( 1, 1) */
    Complex::new(-0.215938329697, -2.537411689758), /* ( 1, 2) */
    Complex::new(-1.348789930344, -0.935531198978), /* ( 1, 3) */
    Complex::new(-0.398543357849,  0.101190350950), /* ( 2, 0) */
    Complex::new(-0.083604514599,  1.493514776230), /* ( 2, 1) */
    Complex::new( 0.477280050516, -0.074863225222), /* ( 2, 2) */
    Complex::new(-0.283995777369,  0.336168438196), /* ( 2, 3) */
    Complex::new(-0.030109925196, -1.602186083794), /* ( 3, 0) */
    Complex::new( 2.220442056656, -0.208865001798), /* ( 3, 1) */
    Complex::new( 1.889614224434, -0.896111547947), /* ( 3, 2) */
    Complex::new(-0.317830920219,  0.215485602617), /* ( 3, 3) */
    Complex::new(-0.945744097233, -0.822628259659), /* ( 4, 0) */
    Complex::new(-0.238264903426,  0.054408840835), /* ( 4, 1) */
    Complex::new( 0.532425582409,  0.438958346844), /* ( 4, 2) */
    Complex::new( 0.089408367872, -1.864659070969), /* ( 4, 3) */
];

// matrixcf_data_transmul_xxT [size: 5 x 5]
pub const MATRIXCF_DATA_TRANSMUL_XXT: [Complex<f32>; 25] = [
    Complex::new(13.946043026996,  0.000000000000), /* ( 0, 0) */
    Complex::new( 1.715635857916,  6.831514803023), /* ( 0, 1) */
    Complex::new(-0.628286275869,  0.653261344190), /* ( 0, 2) */
    Complex::new( 7.410888277177,  5.014956782605), /* ( 0, 3) */
    Complex::new( 4.776506544166, -0.740548606324), /* ( 0, 4) */
    Complex::new( 1.715635857916, -6.831514803023), /* ( 1, 0) */
    Complex::new(12.934634198959,  0.000000000000), /* ( 1, 1) */
    Complex::new(-0.268847669275,  1.016808442009), /* ( 1, 2) */
    Complex::new( 1.329226044140, -1.905118394989), /* ( 1, 3) */
    Complex::new(-0.115507997317, -1.823416830395), /* ( 1, 4) */
    Complex::new(-0.628286275869, -0.653261344190), /* ( 2, 0) */
    Complex::new(-0.268847669275, -1.016808442009), /* ( 2, 1) */
    Complex::new( 2.833715966403,  0.000000000000), /* ( 2, 2) */
    Complex::new( 0.483955462699,  2.897799335427), /* ( 2, 3) */
    Complex::new(-0.036118440085, -1.523720724413), /* ( 2, 4) */
    Complex::new( 7.410888277177, -5.014956782605), /* ( 3, 0) */
    Complex::new( 1.329226044140,  1.905118394989), /* ( 3, 1) */
    Complex::new( 0.483955462699, -2.897799335427), /* ( 3, 2) */
    Complex::new(12.063002732969,  0.000000000000), /* ( 3, 3) */
    Complex::new( 0.988561701830, -0.460512464248), /* ( 3, 4) */
    Complex::new( 4.776506544166,  0.740548606324), /* ( 4, 0) */
    Complex::new(-0.115507997317,  1.823416830395), /* ( 4, 1) */
    Complex::new(-0.036118440085,  1.523720724413), /* ( 4, 2) */
    Complex::new( 0.988561701830,  0.460512464248), /* ( 4, 3) */
    Complex::new( 5.591988375464,  0.000000000000), /* ( 4, 4) */
];

// matrixcf_data_transmul_xxH [size: 5 x 5]
pub const MATRIXCF_DATA_TRANSMUL_XXH: [Complex<f32>; 25] = [
    Complex::new( 2.693069394806,  5.019630491560), /* ( 0, 0) */
    Complex::new( 1.208446246635, -4.757020341403), /* ( 0, 1) */
    Complex::new( 2.656451825557,  2.224444954914), /* ( 0, 2) */
    Complex::new( 5.911512147844, -2.959566260460), /* ( 0, 3) */
    Complex::new(-4.483236639053,  3.806796594938), /* ( 0, 4) */
    Complex::new( 1.208446246635, -4.757020341403), /* ( 1, 0) */
    Complex::new(-3.086513006704,  0.932888319797), /* ( 1, 1) */
    Complex::new(-0.210317709361, -2.269045302266), /* ( 1, 2) */
    Complex::new(-5.412513485879, -6.508039464439), /* ( 1, 3) */
    Complex::new(-2.749055759920,  0.459776624619), /* ( 1, 4) */
    Complex::new( 2.656451825557,  2.224444954914), /* ( 2, 0) */
    Complex::new(-0.210317709361, -2.269045302266), /* ( 2, 1) */
    Complex::new(-1.885163224141, -0.592788922020), /* ( 2, 2) */
    Complex::new( 1.153042421508,  3.232018360881), /* ( 2, 3) */
    Complex::new( 1.287247559495,  0.601010412549), /* ( 2, 4) */
    Complex::new( 5.911512147844, -2.959566260460), /* ( 3, 0) */
    Complex::new(-5.412513485879, -6.508039464439), /* ( 3, 1) */
    Complex::new( 1.153042421508,  3.232018360881), /* ( 3, 2) */
    Complex::new( 5.142853158215, -4.354648092153), /* ( 3, 3) */
    Complex::new(-0.034391537899,  2.674865932467), /* ( 3, 4) */
    Complex::new(-4.483236639053,  3.806796594938), /* ( 4, 0) */
    Complex::new(-2.749055759920,  0.459776624619), /* ( 4, 1) */
    Complex::new( 1.287247559495,  0.601010412549), /* ( 4, 2) */
    Complex::new(-0.034391537899,  2.674865932467), /* ( 4, 3) */
    Complex::new(-3.106642538055,  1.664057265760), /* ( 4, 4) */
];

// matrixcf_data_transmul_xTx [size: 4 x 4]
pub const MATRIXCF_DATA_TRANSMUL_XTX: [Complex<f32>; 16] = [
    Complex::new( 9.323024431917,  0.000000000000), /* ( 0, 0) */
    Complex::new( 0.563876592623,  2.570030362211), /* ( 0, 1) */
    Complex::new( 3.226123027525,  2.636644463529), /* ( 0, 2) */
    Complex::new( 1.129305368076, -4.064920271606), /* ( 0, 3) */
    Complex::new( 0.563876592623, -2.570030362211), /* ( 1, 0) */
    Complex::new( 9.108918860377,  0.000000000000), /* ( 1, 1) */
    Complex::new( 5.467585123601,  2.017612849734), /* ( 1, 2) */
    Complex::new( 0.956522192172,  0.211168853425), /* ( 1, 3) */
    Complex::new( 3.226123027525, -2.636644463529), /* ( 2, 0) */
    Complex::new( 5.467585123601, -2.017612849734), /* ( 2, 1) */
    Complex::new(18.177787287820,  0.000000000000), /* ( 2, 2) */
    Complex::new(-3.137608134941, -7.366300567700), /* ( 2, 3) */
    Complex::new( 1.129305368076,  4.064920271606), /* ( 3, 0) */
    Complex::new( 0.956522192172, -0.211168853425), /* ( 3, 1) */
    Complex::new(-3.137608134941,  7.366300567700), /* ( 3, 2) */
    Complex::new(10.759653720678,  0.000000000000), /* ( 3, 3) */
];

// matrixcf_data_transmul_xHx [size: 4 x 4]
pub const MATRIXCF_DATA_TRANSMUL_XHX: [Complex<f32>; 16] = [
    Complex::new(-1.137085237839, -2.939337742229), /* ( 0, 0) */
    Complex::new(-1.429264118470, -4.526184217761), /* ( 0, 1) */
    Complex::new(-1.049795781222, -9.317515018345), /* ( 0, 2) */
    Complex::new(-6.923890470327,  1.308742276041), /* ( 0, 3) */
    Complex::new(-1.429264118470, -4.526184217761), /* ( 1, 0) */
    Complex::new( 3.863557186128, -2.360596346275), /* ( 1, 1) */
    Complex::new( 6.914587648894, -0.110888488534), /* ( 1, 2) */
    Complex::new(-1.585896210450,  0.361787209777), /* ( 1, 3) */
    Complex::new(-1.049795781222, -9.317515018345), /* ( 2, 0) */
    Complex::new( 6.914587648894, -0.110888488534), /* ( 2, 1) */
    Complex::new( 1.672484488523,  2.446622681596), /* ( 2, 2) */
    Complex::new(-2.591648390404, -1.678750072577), /* ( 2, 3) */
    Complex::new(-6.923890470327,  1.308742276041), /* ( 3, 0) */
    Complex::new(-1.585896210450,  0.361787209777), /* ( 3, 1) */
    Complex::new(-2.591648390404, -1.678750072577), /* ( 3, 2) */
    Complex::new(-4.641352652692,  5.522450469852), /* ( 3, 3) */
];